{
  "language": "Solidity",
  "sources": {
    "@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IBn256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n// G1Point implements a point in G1 group.\nstruct G1Point {\n  uint256 x;\n  uint256 y;\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n\nimport { SortitionCredential } from \"./ISortition.sol\";\n\n/**\n * Fast updater interface.\n */\ninterface IFastUpdater {\n\n    /// Signature structure\n    struct Signature {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    /// Fast update structure\n    struct FastUpdates {\n        uint256 sortitionBlock;\n        SortitionCredential sortitionCredential;\n        bytes deltas;\n        Signature signature;\n    }\n\n    /// Event emitted when a new set of updates is submitted.\n    event FastUpdateFeedsSubmitted(\n        uint32 indexed votingRoundId,\n        address indexed signingPolicyAddress\n    );\n\n    /// Event emitted when a feed is added or reset.\n    event FastUpdateFeedReset(\n        uint256 indexed votingRoundId,\n        uint256 indexed index,\n        bytes21 indexed id,\n        uint256 value,\n        int8 decimals);\n\n    /// Event emitted when a feed is removed.\n    event FastUpdateFeedRemoved(\n        uint256 indexed index);\n\n    /// Event emitted at the start of a new voting epoch - current feeds' values and decimals.\n    event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals);\n\n    /**\n     * The entry point for providers to submit an update transaction.\n     * @param _updates Data of an update transaction, which in addition to the actual list of updates,\n     * includes the sortition credential proving the provider's eligibility to make updates in the also-included\n     * sortition round, as well as a signature allowing a single registered provider to submit from multiple\n     * EVM accounts.\n     */\n    function submitUpdates(FastUpdates calldata _updates) external;\n\n    /**\n     * Public access to the stored data of all feeds.\n     * @return _feedIds The list of feed ids.\n     * @return _feeds The list of feeds.\n     * @return _decimals The list of decimal places for feeds.\n     * @return _timestamp The timestamp of the last update.\n     */\n    function fetchAllCurrentFeeds()\n        external view\n        returns (\n            bytes21[] memory _feedIds,\n            uint256[] memory _feeds,\n            int8[] memory _decimals,\n            uint64 _timestamp\n        );\n\n    /**\n     * Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data.\n     * Feeds should be sorted for better performance.\n     * @param _indices Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in\n     * the `FastUpdatesConfiguration` contract.\n     * @return _feeds The list of data for the requested feeds, in the same order as the feed indices were given\n     * (which may not be their sorted order).\n     * @return _decimals The list of decimal places for the requested feeds, in the same order as the feed indices were\n     * given (which may not be their sorted order).\n     * @return _timestamp The timestamp of the last update.\n     */\n    function fetchCurrentFeeds(\n        uint256[] calldata _indices\n    )\n        external view\n        returns (\n            uint256[] memory _feeds,\n            int8[] memory _decimals,\n            uint64 _timestamp\n        );\n\n    /**\n     * Informational getter concerning the eligibility criterion for being chosen by sortition.\n     * @return _cutoff The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition.\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\n     */\n    function currentScoreCutoff() external view returns (uint256 _cutoff);\n\n    /**\n     * Informational getter concerning the eligibility criterion for being chosen by sortition in a given block.\n     * @param _blockNum The block for which the cutoff is requested.\n     * @return _cutoff The upper endpoint of the acceptable range of \"scores\" that providers generate for sortition.\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\n     */\n    function blockScoreCutoff(uint256 _blockNum) external view returns (uint256 _cutoff);\n\n    /**\n     * Informational getter concerning a provider's likelihood of being chosen by sortition.\n     * @param _signingPolicyAddress The signing policy address of the specified provider. This is different from the\n     * sender of an update transaction, due to the signature included in the `FastUpdates` type.\n     * @return _weight The specified provider's weight for sortition purposes. This is derived from the provider's\n     * delegation weight for the FTSO, but rescaled against a fixed number of \"virtual providers\", indicating how many\n     * potential updates a single provider may make in a sortition round.\n     */\n    function currentSortitionWeight(address _signingPolicyAddress) external view returns (uint256 _weight);\n\n    /**\n     * The submission window is a number of blocks forming a \"grace period\" after a round of sortition starts,\n     * during which providers may submit updates for that round. In other words, each block starts a new round of\n     * sortition and that round lasts `submissionWindow` blocks.\n     */\n    function submissionWindow() external view returns (uint8);\n\n    /**\n     * Id of the current reward epoch.\n     */\n    function currentRewardEpochId() external view returns (uint24);\n\n    /**\n     * The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\n     * @param _historySize The number of blocks for which the number of updates should be returned.\n     * @return _noOfUpdates The number of updates submitted in each block for the last `_historySize` blocks.\n     * The array is ordered from the current block to the oldest block.\n     */\n    function numberOfUpdates(uint256 _historySize) external view returns (uint256[] memory _noOfUpdates);\n\n    /**\n     * The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\n     * @param _blockNumber The block number for which the number of updates should be returned.\n     * @return _noOfUpdates The number of updates submitted in the specified block.\n     */\n    function numberOfUpdatesInBlock(uint256 _blockNumber) external view returns (uint256 _noOfUpdates);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdatesConfiguration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * FastUpdatesConfiguration interface.\n */\ninterface IFastUpdatesConfiguration {\n\n    /**\n     * The feed configuration struct.\n     */\n    struct FeedConfiguration {\n        // feed id\n        bytes21 feedId;\n        // reward band value (interpreted off-chain) in relation to the median\n        uint32 rewardBandValue;\n        // inflation share\n        uint24 inflationShare;\n    }\n\n    /// Event emitted when a feed is added.\n    event FeedAdded(bytes21 indexed feedId, uint32 rewardBandValue, uint24 inflationShare, uint256 index);\n    /// Event emitted when a feed is updated.\n    event FeedUpdated(bytes21 indexed feedId, uint32 rewardBandValue, uint24 inflationShare, uint256 index);\n    /// Event emitted when a feed is removed.\n    event FeedRemoved(bytes21 indexed feedId, uint256 index);\n\n    /**\n     * Returns the index of a feed.\n     * @param _feedId The feed id.\n     * @return _index The index of the feed.\n     */\n    function getFeedIndex(bytes21 _feedId) external view returns (uint256 _index);\n\n    /**\n     * Returns the feed id at a given index. Removed (unused) feed index will return bytes21(0).\n     * @param _index The index.\n     * @return _feedId The feed id.\n     */\n    function getFeedId(uint256 _index) external view returns (bytes21 _feedId);\n\n    /**\n     * Returns all feed ids. For removed (unused) feed indices, the feed id will be bytes21(0).\n     */\n    function getFeedIds() external view returns (bytes21[] memory);\n\n    /**\n     * Returns the number of feeds, including removed ones.\n     */\n    function getNumberOfFeeds() external view returns (uint256);\n\n    /**\n     * Returns the feed configurations, including removed ones.\n     */\n    function getFeedConfigurations() external view returns (FeedConfiguration[] memory);\n\n    /**\n     * Returns the unused indices - indices of removed feeds.\n     */\n    function getUnusedIndices() external view returns (uint256[] memory);\n}"
    },
    "@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/ISortition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport {G1Point} from \"./IBn256.sol\";\n\nstruct SortitionCredential {\n  uint256 replicate;\n  G1Point gamma;\n  uint256 c;\n  uint256 s;\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\ninterface IFlareContractRegistry {\n    /**\n     * @notice Returns contract address for the given name - might be address(0)\n     * @param _name             name of the contract\n     */\n    function getContractAddressByName(string calldata _name) external view returns(address);\n\n    /**\n     * @notice Returns contract address for the given name hash - might be address(0)\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\n     */\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\n\n    /**\n     * @notice Returns contract addresses for the given names - might be address(0)\n     * @param _names            names of the contracts\n     */\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\n\n    /**\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\n     */\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\n\n    /**\n     * @notice Returns all contract names and corresponding addresses\n     */\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\n}\n"
    },
    "contracts/FtsoV2FeedConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport { IFlareContractRegistry } from \"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\";\nimport { IFastUpdater } from \"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\";\nimport { IFastUpdatesConfiguration } from \"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdatesConfiguration.sol\";\n\nlibrary FTSOFeedIdConverter {\n\tfunction FeedCategoryCrypto() internal pure returns (uint8) {\n\t\treturn 1;\n\t}\n\n\tfunction getFeedId(\n\t\tuint8 _category,\n\t\tstring memory _name\n\t) internal pure returns (bytes21) {\n\t\tbytes memory nameBytes = bytes(_name);\n\t\trequire(nameBytes.length <= 20, \"name too long\");\n\t\treturn bytes21(bytes.concat(bytes1(_category), nameBytes));\n\t}\n\n\tfunction getCryptoFeedId(\n\t\tstring memory _name\n\t) internal pure returns (bytes21) {\n\t\treturn\n\t\t\tbytes21(bytes.concat(bytes1(FeedCategoryCrypto()), bytes(_name)));\n\t}\n\n\tfunction getFeedCategoryAndName(\n\t\tbytes21 _feedId\n\t) internal pure returns (uint8 _category, string memory _name) {\n\t\t_category = uint8(_feedId[0]);\n\t\tuint256 length = 20;\n\t\twhile (length > 0) {\n\t\t\tif (_feedId[length] != 0x00) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlength--;\n\t\t}\n\t\tbytes memory nameBytes = new bytes(length);\n\t\tfor (uint256 i = 0; i < length; i++) {\n\t\t\tnameBytes[i] = _feedId[i + 1];\n\t\t}\n\t\t_name = string(nameBytes);\n\t}\n}\n\ncontract FtsoV2FeedConsumer {\n\tIFlareContractRegistry internal contractRegistry;\n\tIFastUpdater internal ftsoV2;\n\tIFastUpdatesConfiguration internal fastUpdatesConfiguration;\n\tuint256[] public feedIndexes = [0, 2, 9];\n\n\tconstructor() {\n\t\tcontractRegistry = IFlareContractRegistry(\n\t\t\t0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\n\t\t);\n\t\tftsoV2 = IFastUpdater(\n\t\t\tcontractRegistry.getContractAddressByName(\"FastUpdater\")\n\t\t);\n\t}\n\n\t/**\n\t * Get the current value of the feeds.\n\t */\n\tfunction getFtsoV2CurrentFeedValues()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256[] memory _feedValues,\n\t\t\tint8[] memory _decimals,\n\t\t\tuint64 _timestamp\n\t\t)\n\t{\n\t\t(\n\t\t\tuint256[] memory feedValues,\n\t\t\tint8[] memory decimals,\n\t\t\tuint64 timestamp\n\t\t) = ftsoV2.fetchCurrentFeeds(feedIndexes);\n\t\t/* Your custom feed consumption logic. In this example the values are just returned. */\n\t\treturn (feedValues, decimals, timestamp);\n\t}\n\n\tfunction getFtsoV2CurrentFeedValuesByName(\n\t\tstring[] memory _assetName\n\t)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256[] memory _feedValues,\n\t\t\tint8[] memory _decimals,\n\t\t\tuint64 _timestamp\n\t\t)\n\t{\n\t\tbytes21[] memory feedIds = new bytes21[](_assetName.length);\n\t\tfor (uint256 i = 0; i < _assetName.length; i++) {\n\t\t\tfeedIds[i] = FTSOFeedIdConverter.getCryptoFeedId(\n\t\t\t\tstring.concat(string(_assetName[i]), string(\"/USD\"))\n\t\t\t);\n\t\t}\n\t\tuint256[] memory indices = new uint256[](feedIds.length);\n\t\tfor (uint256 i = 0; i < feedIds.length; i++) {\n\t\t\tindices[i] = fastUpdatesConfiguration.getFeedIndex(feedIds[i]);\n\t\t}\n\t\t(\n\t\t\tuint256[] memory feedValues,\n\t\t\tint8[] memory decimals,\n\t\t\tuint64 timestamp\n\t\t) = ftsoV2.fetchCurrentFeeds(indices);\n\t\t/* Your custom feed consumption logic. In this example the values are just returned. */\n\t\treturn (feedValues, decimals, timestamp);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}