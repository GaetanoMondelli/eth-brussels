{
  "address": "0x45ed7F721549619b81F50d9Ec489183Ad59c273c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFtsoV2CurrentFeedValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_feedValues",
          "type": "uint256[]"
        },
        {
          "internalType": "int8[]",
          "name": "_decimals",
          "type": "int8[]"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_assetName",
          "type": "string"
        }
      ],
      "name": "getFtsoV2CurrentFeedValuesByName",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_feedValues",
          "type": "uint256[]"
        },
        {
          "internalType": "int8[]",
          "name": "_decimals",
          "type": "int8[]"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_assetName",
          "type": "string[]"
        }
      ],
      "name": "getFtsoV2CurrentFeedValuesByNames",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_feedValues",
          "type": "uint256[]"
        },
        {
          "internalType": "int8[]",
          "name": "_decimals",
          "type": "int8[]"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x748883f42d9c958730200a579456819eb7b716caa3b041c43e26f0c0b880240c",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x45ed7F721549619b81F50d9Ec489183Ad59c273c",
    "transactionIndex": 1,
    "gasUsed": "739784",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x04166e150feb0d8617c66ee052a4989d83499bfa4e4a67de0442a1866e5d1907",
    "transactionHash": "0x748883f42d9c958730200a579456819eb7b716caa3b041c43e26f0c0b880240c",
    "logs": [],
    "blockNumber": 9836298,
    "cumulativeGasUsed": "951801",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "3e985deb25681eb51b5ee2ff47055d9e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFtsoV2CurrentFeedValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feedValues\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_assetName\",\"type\":\"string\"}],\"name\":\"getFtsoV2CurrentFeedValuesByName\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feedValues\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_assetName\",\"type\":\"string[]\"}],\"name\":\"getFtsoV2CurrentFeedValuesByNames\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feedValues\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor initializes the FTSOv2 contract. The contract registry is used to fetch the FTSOv2 contract address.\"},\"getFtsoV2CurrentFeedValues()\":{\"notice\":\"Get the current value of the feeds.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FtsoV2FeedConsumer.sol\":\"FtsoV2FeedConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IBn256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// G1Point implements a point in G1 group.\\nstruct G1Point {\\n  uint256 x;\\n  uint256 y;\\n}\\n\",\"keccak256\":\"0xd04c3b6f729dbe78f57526de2b58510c4e906810dadf5836ba0715e4d60fe6f0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\nimport { SortitionCredential } from \\\"./ISortition.sol\\\";\\n\\n/**\\n * Fast updater interface.\\n */\\ninterface IFastUpdater {\\n\\n    /// Signature structure\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// Fast update structure\\n    struct FastUpdates {\\n        uint256 sortitionBlock;\\n        SortitionCredential sortitionCredential;\\n        bytes deltas;\\n        Signature signature;\\n    }\\n\\n    /// Event emitted when a new set of updates is submitted.\\n    event FastUpdateFeedsSubmitted(\\n        uint32 indexed votingRoundId,\\n        address indexed signingPolicyAddress\\n    );\\n\\n    /// Event emitted when a feed is added or reset.\\n    event FastUpdateFeedReset(\\n        uint256 indexed votingRoundId,\\n        uint256 indexed index,\\n        bytes21 indexed id,\\n        uint256 value,\\n        int8 decimals);\\n\\n    /// Event emitted when a feed is removed.\\n    event FastUpdateFeedRemoved(\\n        uint256 indexed index);\\n\\n    /// Event emitted at the start of a new voting epoch - current feeds' values and decimals.\\n    event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals);\\n\\n    /**\\n     * The entry point for providers to submit an update transaction.\\n     * @param _updates Data of an update transaction, which in addition to the actual list of updates,\\n     * includes the sortition credential proving the provider's eligibility to make updates in the also-included\\n     * sortition round, as well as a signature allowing a single registered provider to submit from multiple\\n     * EVM accounts.\\n     */\\n    function submitUpdates(FastUpdates calldata _updates) external;\\n\\n    /**\\n     * Public access to the stored data of all feeds.\\n     * @return _feedIds The list of feed ids.\\n     * @return _feeds The list of feeds.\\n     * @return _decimals The list of decimal places for feeds.\\n     * @return _timestamp The timestamp of the last update.\\n     */\\n    function fetchAllCurrentFeeds()\\n        external view\\n        returns (\\n            bytes21[] memory _feedIds,\\n            uint256[] memory _feeds,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        );\\n\\n    /**\\n     * Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data.\\n     * Feeds should be sorted for better performance.\\n     * @param _indices Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in\\n     * the `FastUpdatesConfiguration` contract.\\n     * @return _feeds The list of data for the requested feeds, in the same order as the feed indices were given\\n     * (which may not be their sorted order).\\n     * @return _decimals The list of decimal places for the requested feeds, in the same order as the feed indices were\\n     * given (which may not be their sorted order).\\n     * @return _timestamp The timestamp of the last update.\\n     */\\n    function fetchCurrentFeeds(\\n        uint256[] calldata _indices\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _feeds,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        );\\n\\n    /**\\n     * Informational getter concerning the eligibility criterion for being chosen by sortition.\\n     * @return _cutoff The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition.\\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\\n     */\\n    function currentScoreCutoff() external view returns (uint256 _cutoff);\\n\\n    /**\\n     * Informational getter concerning the eligibility criterion for being chosen by sortition in a given block.\\n     * @param _blockNum The block for which the cutoff is requested.\\n     * @return _cutoff The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition.\\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\\n     */\\n    function blockScoreCutoff(uint256 _blockNum) external view returns (uint256 _cutoff);\\n\\n    /**\\n     * Informational getter concerning a provider's likelihood of being chosen by sortition.\\n     * @param _signingPolicyAddress The signing policy address of the specified provider. This is different from the\\n     * sender of an update transaction, due to the signature included in the `FastUpdates` type.\\n     * @return _weight The specified provider's weight for sortition purposes. This is derived from the provider's\\n     * delegation weight for the FTSO, but rescaled against a fixed number of \\\"virtual providers\\\", indicating how many\\n     * potential updates a single provider may make in a sortition round.\\n     */\\n    function currentSortitionWeight(address _signingPolicyAddress) external view returns (uint256 _weight);\\n\\n    /**\\n     * The submission window is a number of blocks forming a \\\"grace period\\\" after a round of sortition starts,\\n     * during which providers may submit updates for that round. In other words, each block starts a new round of\\n     * sortition and that round lasts `submissionWindow` blocks.\\n     */\\n    function submissionWindow() external view returns (uint8);\\n\\n    /**\\n     * Id of the current reward epoch.\\n     */\\n    function currentRewardEpochId() external view returns (uint24);\\n\\n    /**\\n     * The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\\n     * @param _historySize The number of blocks for which the number of updates should be returned.\\n     * @return _noOfUpdates The number of updates submitted in each block for the last `_historySize` blocks.\\n     * The array is ordered from the current block to the oldest block.\\n     */\\n    function numberOfUpdates(uint256 _historySize) external view returns (uint256[] memory _noOfUpdates);\\n\\n    /**\\n     * The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\\n     * @param _blockNumber The block number for which the number of updates should be returned.\\n     * @return _noOfUpdates The number of updates submitted in the specified block.\\n     */\\n    function numberOfUpdatesInBlock(uint256 _blockNumber) external view returns (uint256 _noOfUpdates);\\n}\\n\",\"keccak256\":\"0x81365c04d655f129e698ffcf83e22a55948331f99b9b54f4793857e9a0e2c71e\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdatesConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n/**\\n * FastUpdatesConfiguration interface.\\n */\\ninterface IFastUpdatesConfiguration {\\n\\n    /**\\n     * The feed configuration struct.\\n     */\\n    struct FeedConfiguration {\\n        // feed id\\n        bytes21 feedId;\\n        // reward band value (interpreted off-chain) in relation to the median\\n        uint32 rewardBandValue;\\n        // inflation share\\n        uint24 inflationShare;\\n    }\\n\\n    /// Event emitted when a feed is added.\\n    event FeedAdded(bytes21 indexed feedId, uint32 rewardBandValue, uint24 inflationShare, uint256 index);\\n    /// Event emitted when a feed is updated.\\n    event FeedUpdated(bytes21 indexed feedId, uint32 rewardBandValue, uint24 inflationShare, uint256 index);\\n    /// Event emitted when a feed is removed.\\n    event FeedRemoved(bytes21 indexed feedId, uint256 index);\\n\\n    /**\\n     * Returns the index of a feed.\\n     * @param _feedId The feed id.\\n     * @return _index The index of the feed.\\n     */\\n    function getFeedIndex(bytes21 _feedId) external view returns (uint256 _index);\\n\\n    /**\\n     * Returns the feed id at a given index. Removed (unused) feed index will return bytes21(0).\\n     * @param _index The index.\\n     * @return _feedId The feed id.\\n     */\\n    function getFeedId(uint256 _index) external view returns (bytes21 _feedId);\\n\\n    /**\\n     * Returns all feed ids. For removed (unused) feed indices, the feed id will be bytes21(0).\\n     */\\n    function getFeedIds() external view returns (bytes21[] memory);\\n\\n    /**\\n     * Returns the number of feeds, including removed ones.\\n     */\\n    function getNumberOfFeeds() external view returns (uint256);\\n\\n    /**\\n     * Returns the feed configurations, including removed ones.\\n     */\\n    function getFeedConfigurations() external view returns (FeedConfiguration[] memory);\\n\\n    /**\\n     * Returns the unused indices - indices of removed feeds.\\n     */\\n    function getUnusedIndices() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x22a331a4c087e56a493be951d67597be2849f0f6934fd648468ce7d681ebba11\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/ISortition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {G1Point} from \\\"./IBn256.sol\\\";\\n\\nstruct SortitionCredential {\\n  uint256 replicate;\\n  G1Point gamma;\\n  uint256 c;\\n  uint256 s;\\n}\\n\",\"keccak256\":\"0xce8eac4878a9af3a2aea4f4dc74995358de06a0d3b937ad84d3fe98b953c0a6c\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"contracts/FtsoV2FeedConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IFlareContractRegistry} from \\\"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\\\";\\nimport {IFastUpdater} from \\\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\\\";\\nimport {IFastUpdatesConfiguration} from \\\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdatesConfiguration.sol\\\";\\n\\nlibrary FTSOFeedIdConverter {\\n    function FeedCategoryCrypto() internal pure returns (uint8) {\\n        return 1;\\n    }\\n    function getFeedId(\\n        uint8 _category,\\n        string memory _name\\n    ) internal pure returns (bytes21) {\\n        bytes memory nameBytes = bytes(_name);\\n        require(nameBytes.length <= 20, \\\"name too long\\\");\\n        return bytes21(bytes.concat(bytes1(_category), nameBytes));\\n    }\\n\\n    function getCryptoFeedId(\\n        string memory _name\\n    ) internal pure returns (bytes21) {\\n        return\\n            bytes21(bytes.concat(bytes1(FeedCategoryCrypto()), bytes(_name)));\\n    }\\n\\n    function getFeedCategoryAndName(\\n        bytes21 _feedId\\n    ) internal pure returns (uint8 _category, string memory _name) {\\n        _category = uint8(_feedId[0]);\\n        uint256 length = 20;\\n        while (length > 0) {\\n            if (_feedId[length] != 0x00) {\\n                break;\\n            }\\n            length--;\\n        }\\n        bytes memory nameBytes = new bytes(length);\\n        for (uint256 i = 0; i < length; i++) {\\n            nameBytes[i] = _feedId[i + 1];\\n        }\\n        _name = string(nameBytes);\\n    }\\n}\\n\\ncontract FtsoV2FeedConsumer {\\n    IFlareContractRegistry internal contractRegistry;\\n    IFastUpdater internal ftsoV2;\\n    IFastUpdatesConfiguration internal fastUpdatesConfiguration;\\n    // Feed indexes: 0 = FLR/USD, 2 = BTC/USD, 9 = ETH/USD\\n    uint256[] public feedIndexes = [0, 2, 9];\\n\\n    /**\\n     * Constructor initializes the FTSOv2 contract.\\n     * The contract registry is used to fetch the FTSOv2 contract address.\\n     */\\n    constructor() {\\n        contractRegistry = IFlareContractRegistry(\\n            0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\\n        );\\n        ftsoV2 = IFastUpdater(\\n            contractRegistry.getContractAddressByName(\\\"FastUpdater\\\")\\n        );\\n        fastUpdatesConfiguration = IFastUpdatesConfiguration(\\n            contractRegistry.getContractAddressByName(\\n                \\\"FastUpdatesConfiguration\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Get the current value of the feeds.\\n     */\\n    function getFtsoV2CurrentFeedValues()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _feedValues,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        )\\n    {\\n        (\\n            uint256[] memory feedValues,\\n            int8[] memory decimals,\\n            uint64 timestamp\\n        ) = ftsoV2.fetchCurrentFeeds(feedIndexes);\\n        /* Your custom feed consumption logic. In this example the values are just returned. */\\n        return (feedValues, decimals, timestamp);\\n    }\\n\\n    function getFtsoV2CurrentFeedValuesByNames(\\n        string[] memory _assetName\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _feedValues,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        )\\n    {\\n        bytes21[] memory feedIds = new bytes21[](_assetName.length);\\n        for (uint256 i = 0; i < _assetName.length; i++) {\\n            feedIds[i] = FTSOFeedIdConverter.getCryptoFeedId(\\n                string.concat(string(_assetName[i]), string(\\\"/USD\\\"))\\n            );\\n        }\\n        uint256[] memory indices = new uint256[](feedIds.length);\\n        for (uint256 i = 0; i < feedIds.length; i++) {\\n            indices[i] = fastUpdatesConfiguration.getFeedIndex(feedIds[i]);\\n        }\\n        (\\n            uint256[] memory feedValues,\\n            int8[] memory decimals,\\n            uint64 timestamp\\n        ) = ftsoV2.fetchCurrentFeeds(indices);\\n        /* Your custom feed consumption logic. In this example the values are just returned. */\\n        return (feedValues, decimals, timestamp);\\n    }\\n\\n    function getFtsoV2CurrentFeedValuesByName(\\n        string memory _assetName\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory _feedValues,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        )\\n    {\\n        bytes21[] memory feedIds = new bytes21[](1);\\n\\n        feedIds[0] = FTSOFeedIdConverter.getCryptoFeedId(\\n            string.concat(string(_assetName), string(\\\"/USD\\\"))\\n        );\\n\\n        uint256[] memory indices = new uint256[](feedIds.length);\\n        for (uint256 i = 0; i < feedIds.length; i++) {\\n            indices[i] = fastUpdatesConfiguration.getFeedIndex(feedIds[i]);\\n        }\\n        (\\n            uint256[] memory feedValues,\\n            int8[] memory decimals,\\n            uint64 timestamp\\n        ) = ftsoV2.fetchCurrentFeeds(indices);\\n        /* Your custom feed consumption logic. In this example the values are just returned. */\\n        return (feedValues, decimals, timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0xc08ee64cc47250f0410ec51ff63fa50bbec664912b08dd14e2fa0024b1363eaf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200020e5760608101906001600160401b03821181831017620001f85760409182526000908181526020906002828201526009848201526003908154828055808310620001d0575b50818452828420845b838110620001ba575050505073ad67fe66660fb8dfe9d6b1b4240d8650e30f60199160018060a01b031992808483541617825584519263413b07e560e11b808552816004860152600b60248601526a2330b9ba2ab83230ba32b960a91b60448601528185606481865afa948515620001b05784956200018a575b50819060018060a01b0380961687600154161760015560648851809581938252846004830152601860248301527f4661737455706461746573436f6e66696775726174696f6e000000000000000060448301525afa9283156200017f57926200014b575b5050169060025416176002555161097c9081620002598239f35b6200016f9250803d1062000177575b62000166818362000213565b81019062000237565b388062000131565b503d6200015a565b8651903d90823e3d90fd5b82919550620001a890823d8411620001775762000166818362000213565b9490620000cd565b87513d86823e3d90fd5b825160ff16828201559184019160010162000053565b8285528284862091820191015b818110620001ec57506200004a565b858155600101620001dd565b634e487b7160e01b600052604160045260246000fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620001f857604052565b908160209103126200020e57516001600160a01b03811681036200020e579056fe60406080815260048036101561001457600080fd5b600091823560e01c806307dc8a36146103955780633eac152b1461019e578063dae2f4bc146101505763f601bc8b1461004c57600080fd5b3461014c578260031936011261014c57600180548251631168574f60e21b8152602094810185905260038054602483018190529087529094869386936001600160a01b03169260448501927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b92919087905b82821061013157505050505082809103915afa9081156101285783928480936100f7575b5050906100f3915193849384610682565b0390f35b909193506100f3945061011c92503d8091833e61011481836105b8565b8101906107cf565b939192909391386100e2565b513d84823e3d90fd5b845486528b98508a97509485019493830193908301906100be565b8280fd5b50903461014c57602036600319011261014c573560035481101561014c576003602093527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01549051908152f35b50903461014c576020908160031936011261039157803567ffffffffffffffff811161038d576101d190369083016105f2565b9183516101dd81610586565b60018082526102036101fe84840196853689376101f8610749565b9061078c565b6108d3565b9482511561037a5793869388968794966affffffffffffffffffffff19809216905261022f87516106ed565b93858160018060a01b03938460025416915b6102c2575b5050505061027496506001541691855196879485938493631168574f60e21b8552840152602483019061064e565b03915afa908115610128578392848093610299575050906100f3915193849384610682565b909193506100f394506102b692503d8091833e61011481836105b8565b939192909391856100e2565b919395978a91939597999a5185101561036d5750816102e1858361071f565b518b51630a9cabe760e01b8152911689820152938785602481875afa80156103635786958d9161032c575b5090859161031a828d61071f565b5201918b98969493919a999795610241565b80929650898092503d831161035c575b61034681836105b8565b8101031261035857518594908561030c565b8b80fd5b503d61033c565b8b513d8e823e3d90fd5b9795938a99979550610246565b634e487b7160e01b885260328552602488fd5b8480fd5b8380fd5b508234610583576020918260031936011261057f5783359367ffffffffffffffff90818611610391573660238701121561039157602491818701356103d9816105da565b976103e68651998a6105b8565b8189526024888a019260051b8201019236841161057b5760248201925b84841061055157505050505061041986516106ed565b93805b875181101561046257806104416101fe6104386001948c61071f565b516101f8610749565b61044b828961071f565b906affffffffffffffffffffff191690520161041c565b509184928661047185516106ed565b6002546001600160a01b03969195908716949091845b8151811015610522576affffffffffffffffffffff196104a7828461071f565b518b51630a9cabe760e01b815291168582015290858285818b5afa80156105185787906104e4575b600192506104dd828b61071f565b5201610487565b50908581813d8311610511575b6104fb81836105b8565b8101031261050d5790600191516104cf565b8680fd5b503d6104f1565b8b513d89823e3d90fd5b856102748b828b888a8f6001541691855196879485938493631168574f60e21b8552840152602483019061064e565b8335828111610577578a9161056c83928a36918801016105f2565b815201930192610403565b8980fd5b8780fd5b5080fd5b80fd5b6040810190811067ffffffffffffffff8211176105a257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176105a257604052565b67ffffffffffffffff81116105a25760051b60200190565b81601f820112156106495780359067ffffffffffffffff82116105a25760405192610627601f8401601f1916602001856105b8565b8284526020838301011161064957816000926020809301838601378301015290565b600080fd5b90815180825260208080930193019160005b82811061066e575050505090565b835185529381019392810192600101610660565b91906106999094939460608452606084019061064e565b6020908381036020850152602080845192838152019301916000805b8382106106d457505050505067ffffffffffffffff6040919416910152565b8451810b865294820194938201936001909101906106b5565b906106f7826105da565b61070460405191826105b8565b8281528092610715601f19916105da565b0190602036910137565b80518210156107335760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6040519061075682610586565b60048252630bd554d160e21b6020830152565b60005b83811061077c5750506000910152565b818101518382015260200161076c565b60206107cd9193929360405194816107ad8793518092868087019101610769565b82016107c182518093868085019101610769565b010380855201836105b8565b565b909160608284031261064957815167ffffffffffffffff908181116106495783019380601f860112156106495784519460209561080b816105da565b9161081960405193846105b8565b818352878084019260051b820101918483116106495788809201905b8382106108c4575050505094808501518381116106495785019180601f84011215610649578251610865816105da565b9361087360405195866105b8565b818552838086019260051b820101928311610649578301905b8282106108a9575050505060409093015190811681036106495790565b8151600081810b82036105835750815290830190830161088c565b81518152908201908201610835565b60405161090b6021826020810194600160f81b86526108fb8151809260208686019101610769565b81010360018101845201826105b8565b5190516affffffffffffffffffffff1991828216919060158110610931575b5050905090565b8391925060150360031b1b161680388061092a56fea26469706673582212209b427cab4d3af3d6bb41c89090571b308d67d6f270c74c3a93373e2bac72f0d664736f6c63430008160033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c806307dc8a36146103955780633eac152b1461019e578063dae2f4bc146101505763f601bc8b1461004c57600080fd5b3461014c578260031936011261014c57600180548251631168574f60e21b8152602094810185905260038054602483018190529087529094869386936001600160a01b03169260448501927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b92919087905b82821061013157505050505082809103915afa9081156101285783928480936100f7575b5050906100f3915193849384610682565b0390f35b909193506100f3945061011c92503d8091833e61011481836105b8565b8101906107cf565b939192909391386100e2565b513d84823e3d90fd5b845486528b98508a97509485019493830193908301906100be565b8280fd5b50903461014c57602036600319011261014c573560035481101561014c576003602093527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01549051908152f35b50903461014c576020908160031936011261039157803567ffffffffffffffff811161038d576101d190369083016105f2565b9183516101dd81610586565b60018082526102036101fe84840196853689376101f8610749565b9061078c565b6108d3565b9482511561037a5793869388968794966affffffffffffffffffffff19809216905261022f87516106ed565b93858160018060a01b03938460025416915b6102c2575b5050505061027496506001541691855196879485938493631168574f60e21b8552840152602483019061064e565b03915afa908115610128578392848093610299575050906100f3915193849384610682565b909193506100f394506102b692503d8091833e61011481836105b8565b939192909391856100e2565b919395978a91939597999a5185101561036d5750816102e1858361071f565b518b51630a9cabe760e01b8152911689820152938785602481875afa80156103635786958d9161032c575b5090859161031a828d61071f565b5201918b98969493919a999795610241565b80929650898092503d831161035c575b61034681836105b8565b8101031261035857518594908561030c565b8b80fd5b503d61033c565b8b513d8e823e3d90fd5b9795938a99979550610246565b634e487b7160e01b885260328552602488fd5b8480fd5b8380fd5b508234610583576020918260031936011261057f5783359367ffffffffffffffff90818611610391573660238701121561039157602491818701356103d9816105da565b976103e68651998a6105b8565b8189526024888a019260051b8201019236841161057b5760248201925b84841061055157505050505061041986516106ed565b93805b875181101561046257806104416101fe6104386001948c61071f565b516101f8610749565b61044b828961071f565b906affffffffffffffffffffff191690520161041c565b509184928661047185516106ed565b6002546001600160a01b03969195908716949091845b8151811015610522576affffffffffffffffffffff196104a7828461071f565b518b51630a9cabe760e01b815291168582015290858285818b5afa80156105185787906104e4575b600192506104dd828b61071f565b5201610487565b50908581813d8311610511575b6104fb81836105b8565b8101031261050d5790600191516104cf565b8680fd5b503d6104f1565b8b513d89823e3d90fd5b856102748b828b888a8f6001541691855196879485938493631168574f60e21b8552840152602483019061064e565b8335828111610577578a9161056c83928a36918801016105f2565b815201930192610403565b8980fd5b8780fd5b5080fd5b80fd5b6040810190811067ffffffffffffffff8211176105a257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176105a257604052565b67ffffffffffffffff81116105a25760051b60200190565b81601f820112156106495780359067ffffffffffffffff82116105a25760405192610627601f8401601f1916602001856105b8565b8284526020838301011161064957816000926020809301838601378301015290565b600080fd5b90815180825260208080930193019160005b82811061066e575050505090565b835185529381019392810192600101610660565b91906106999094939460608452606084019061064e565b6020908381036020850152602080845192838152019301916000805b8382106106d457505050505067ffffffffffffffff6040919416910152565b8451810b865294820194938201936001909101906106b5565b906106f7826105da565b61070460405191826105b8565b8281528092610715601f19916105da565b0190602036910137565b80518210156107335760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6040519061075682610586565b60048252630bd554d160e21b6020830152565b60005b83811061077c5750506000910152565b818101518382015260200161076c565b60206107cd9193929360405194816107ad8793518092868087019101610769565b82016107c182518093868085019101610769565b010380855201836105b8565b565b909160608284031261064957815167ffffffffffffffff908181116106495783019380601f860112156106495784519460209561080b816105da565b9161081960405193846105b8565b818352878084019260051b820101918483116106495788809201905b8382106108c4575050505094808501518381116106495785019180601f84011215610649578251610865816105da565b9361087360405195866105b8565b818552838086019260051b820101928311610649578301905b8282106108a9575050505060409093015190811681036106495790565b8151600081810b82036105835750815290830190830161088c565b81518152908201908201610835565b60405161090b6021826020810194600160f81b86526108fb8151809260208686019101610769565b81010360018101845201826105b8565b5190516affffffffffffffffffffff1991828216919060158110610931575b5050905090565b8391925060150360031b1b161680388061092a56fea26469706673582212209b427cab4d3af3d6bb41c89090571b308d67d6f270c74c3a93373e2bac72f0d664736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor initializes the FTSOv2 contract. The contract registry is used to fetch the FTSOv2 contract address."
      },
      "getFtsoV2CurrentFeedValues()": {
        "notice": "Get the current value of the feeds."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 463,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFlareContractRegistry)305"
      },
      {
        "astId": 466,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "ftsoV2",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFastUpdater)156"
      },
      {
        "astId": 469,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "fastUpdatesConfiguration",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFastUpdatesConfiguration)241"
      },
      {
        "astId": 476,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "feedIndexes",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IFastUpdater)156": {
        "encoding": "inplace",
        "label": "contract IFastUpdater",
        "numberOfBytes": "20"
      },
      "t_contract(IFastUpdatesConfiguration)241": {
        "encoding": "inplace",
        "label": "contract IFastUpdatesConfiguration",
        "numberOfBytes": "20"
      },
      "t_contract(IFlareContractRegistry)305": {
        "encoding": "inplace",
        "label": "contract IFlareContractRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}