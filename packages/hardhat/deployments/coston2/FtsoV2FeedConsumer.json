{
  "address": "0x04a14C5c473bde21bDd52C2f169d99597B298a5B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFtsoV2CurrentFeedValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_feedValues",
          "type": "uint256[]"
        },
        {
          "internalType": "int8[]",
          "name": "_decimals",
          "type": "int8[]"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x51fb737d61dea866b9daf210eaf87432ce1afa36414cd9749aee05471a1af8d2",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x04a14C5c473bde21bDd52C2f169d99597B298a5B",
    "transactionIndex": 1,
    "gasUsed": "414296",
    "logsBloom": "0x
    "blockHash": "0xcd7b425c69de7d4c0db471d2d7579609922074d687e7f423856cc744510f636d",
    "transactionHash": "0x51fb737d61dea866b9daf210eaf87432ce1afa36414cd9749aee05471a1af8d2",
    "logs": [],
    "blockNumber": 9636254,
    "cumulativeGasUsed": "652517",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3838f363d96520a75828828b5b8e13d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFtsoV2CurrentFeedValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feedValues\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor initializes the FTSOv2 contract. The contract registry is used to fetch the FTSOv2 contract address.\"},\"getFtsoV2CurrentFeedValues()\":{\"notice\":\"Get the current value of the feeds.\"}},\"notice\":\"THIS IS AN EXAMPLE CONTRACT. DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FtsoV2FeedConsumer.sol\":\"FtsoV2FeedConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IBn256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// G1Point implements a point in G1 group.\\nstruct G1Point {\\n  uint256 x;\\n  uint256 y;\\n}\\n\",\"keccak256\":\"0xd04c3b6f729dbe78f57526de2b58510c4e906810dadf5836ba0715e4d60fe6f0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\nimport { SortitionCredential } from \\\"./ISortition.sol\\\";\\n\\n/**\\n * Fast updater interface.\\n */\\ninterface IFastUpdater {\\n\\n    /// Signature structure\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// Fast update structure\\n    struct FastUpdates {\\n        uint256 sortitionBlock;\\n        SortitionCredential sortitionCredential;\\n        bytes deltas;\\n        Signature signature;\\n    }\\n\\n    /// Event emitted when a new set of updates is submitted.\\n    event FastUpdateFeedsSubmitted(\\n        uint32 indexed votingRoundId,\\n        address indexed signingPolicyAddress\\n    );\\n\\n    /// Event emitted when a feed is added or reset.\\n    event FastUpdateFeedReset(\\n        uint256 indexed votingRoundId,\\n        uint256 indexed index,\\n        bytes21 indexed id,\\n        uint256 value,\\n        int8 decimals);\\n\\n    /// Event emitted when a feed is removed.\\n    event FastUpdateFeedRemoved(\\n        uint256 indexed index);\\n\\n    /// Event emitted at the start of a new voting epoch - current feeds' values and decimals.\\n    event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals);\\n\\n    /**\\n     * The entry point for providers to submit an update transaction.\\n     * @param _updates Data of an update transaction, which in addition to the actual list of updates,\\n     * includes the sortition credential proving the provider's eligibility to make updates in the also-included\\n     * sortition round, as well as a signature allowing a single registered provider to submit from multiple\\n     * EVM accounts.\\n     */\\n    function submitUpdates(FastUpdates calldata _updates) external;\\n\\n    /**\\n     * Public access to the stored data of all feeds.\\n     * @return _feedIds The list of feed ids.\\n     * @return _feeds The list of feeds.\\n     * @return _decimals The list of decimal places for feeds.\\n     * @return _timestamp The timestamp of the last update.\\n     */\\n    function fetchAllCurrentFeeds()\\n        external view\\n        returns (\\n            bytes21[] memory _feedIds,\\n            uint256[] memory _feeds,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        );\\n\\n    /**\\n     * Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data.\\n     * Feeds should be sorted for better performance.\\n     * @param _indices Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in\\n     * the `FastUpdatesConfiguration` contract.\\n     * @return _feeds The list of data for the requested feeds, in the same order as the feed indices were given\\n     * (which may not be their sorted order).\\n     * @return _decimals The list of decimal places for the requested feeds, in the same order as the feed indices were\\n     * given (which may not be their sorted order).\\n     * @return _timestamp The timestamp of the last update.\\n     */\\n    function fetchCurrentFeeds(\\n        uint256[] calldata _indices\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _feeds,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        );\\n\\n    /**\\n     * Informational getter concerning the eligibility criterion for being chosen by sortition.\\n     * @return _cutoff The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition.\\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\\n     */\\n    function currentScoreCutoff() external view returns (uint256 _cutoff);\\n\\n    /**\\n     * Informational getter concerning the eligibility criterion for being chosen by sortition in a given block.\\n     * @param _blockNum The block for which the cutoff is requested.\\n     * @return _cutoff The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition.\\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\\n     */\\n    function blockScoreCutoff(uint256 _blockNum) external view returns (uint256 _cutoff);\\n\\n    /**\\n     * Informational getter concerning a provider's likelihood of being chosen by sortition.\\n     * @param _signingPolicyAddress The signing policy address of the specified provider. This is different from the\\n     * sender of an update transaction, due to the signature included in the `FastUpdates` type.\\n     * @return _weight The specified provider's weight for sortition purposes. This is derived from the provider's\\n     * delegation weight for the FTSO, but rescaled against a fixed number of \\\"virtual providers\\\", indicating how many\\n     * potential updates a single provider may make in a sortition round.\\n     */\\n    function currentSortitionWeight(address _signingPolicyAddress) external view returns (uint256 _weight);\\n\\n    /**\\n     * The submission window is a number of blocks forming a \\\"grace period\\\" after a round of sortition starts,\\n     * during which providers may submit updates for that round. In other words, each block starts a new round of\\n     * sortition and that round lasts `submissionWindow` blocks.\\n     */\\n    function submissionWindow() external view returns (uint8);\\n\\n    /**\\n     * Id of the current reward epoch.\\n     */\\n    function currentRewardEpochId() external view returns (uint24);\\n\\n    /**\\n     * The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\\n     * @param _historySize The number of blocks for which the number of updates should be returned.\\n     * @return _noOfUpdates The number of updates submitted in each block for the last `_historySize` blocks.\\n     * The array is ordered from the current block to the oldest block.\\n     */\\n    function numberOfUpdates(uint256 _historySize) external view returns (uint256[] memory _noOfUpdates);\\n\\n    /**\\n     * The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\\n     * @param _blockNumber The block number for which the number of updates should be returned.\\n     * @return _noOfUpdates The number of updates submitted in the specified block.\\n     */\\n    function numberOfUpdatesInBlock(uint256 _blockNumber) external view returns (uint256 _noOfUpdates);\\n}\\n\",\"keccak256\":\"0x81365c04d655f129e698ffcf83e22a55948331f99b9b54f4793857e9a0e2c71e\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/ISortition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {G1Point} from \\\"./IBn256.sol\\\";\\n\\nstruct SortitionCredential {\\n  uint256 replicate;\\n  G1Point gamma;\\n  uint256 c;\\n  uint256 s;\\n}\\n\",\"keccak256\":\"0xce8eac4878a9af3a2aea4f4dc74995358de06a0d3b937ad84d3fe98b953c0a6c\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"contracts/FtsoV2FeedConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IFlareContractRegistry} from \\\"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\\\";\\nimport {IFastUpdater} from \\\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\\\";\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\ncontract FtsoV2FeedConsumer {\\n    IFlareContractRegistry internal contractRegistry;\\n    IFastUpdater internal ftsoV2;\\n    // Feed indexes: 0 = FLR/USD, 2 = BTC/USD, 9 = ETH/USD\\n    uint256[] public feedIndexes = [0, 2, 9];\\n\\n    /**\\n     * Constructor initializes the FTSOv2 contract.\\n     * The contract registry is used to fetch the FTSOv2 contract address.\\n     */\\n    constructor() {\\n        contractRegistry = IFlareContractRegistry(\\n            0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\\n        );\\n        ftsoV2 = IFastUpdater(\\n            contractRegistry.getContractAddressByName(\\\"FastUpdater\\\")\\n        );\\n    }\\n\\n    /**\\n     * Get the current value of the feeds.\\n     */\\n    function getFtsoV2CurrentFeedValues()\\n        external\\n        view\\n        returns (\\n            uint256[] memory _feedValues,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        )\\n    {\\n        (\\n            uint256[] memory feedValues,\\n            int8[] memory decimals,\\n            uint64 timestamp\\n        ) = ftsoV2.fetchCurrentFeeds(feedIndexes);\\n        /* Your custom feed consumption logic. In this example the values are just returned. */\\n        return (feedValues, decimals, timestamp);\\n    }\\n}\",\"keccak256\":\"0x8e06161be0a9ea5ce3d523a6cb28358d224f50adedeea438d6a7c99955ed2587\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260006080908152600260a0819052600960c0526100229160036100f7565b5034801561002f57600080fd5b50600080546001600160a01b03191673ad67fe66660fb8dfe9d6b1b4240d8650e30f601990811790915560405163413b07e560e11b815260206004820152600b60248201526a2330b9ba2ab83230ba32b960a91b60448201526382760fca90606401602060405180830381865afa1580156100ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d2919061015c565b600180546001600160a01b0319166001600160a01b039290921691909117905561018c565b828054828255906000526020600020908101928215610137579160200282015b82811115610137578251829060ff16905591602001919060010190610117565b50610143929150610147565b5090565b5b808211156101435760008155600101610148565b60006020828403121561016e57600080fd5b81516001600160a01b038116811461018557600080fd5b9392505050565b6104278061019b6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063dae2f4bc1461003b578063f601bc8b14610061575b600080fd5b61004e61004936600461012c565b610078565b6040519081526020015b60405180910390f35b610069610099565b60405161005893929190610145565b6002818154811061008857600080fd5b600091825260209091200154905081565b600154604051631168574f60e21b815260609182916000918291829182916001600160a01b03909116906345a15d3c906100d8906002906004016101db565b600060405180830381865afa1580156100f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011d9190810190610325565b91989097509095509350505050565b60006020828403121561013e57600080fd5b5035919050565b60608082528451908201819052600090602090608084019082880184805b8381101561017f57825185529385019391850191600101610163565b5086840385880152885180855289860194860193509150805b828110156101b6578451820b84529385019392850192600101610198565b50505067ffffffffffffffff8616604086015292506101d3915050565b949350505050565b6020808252825482820181905260008481528281209092916040850190845b81811015610216578354835260019384019392850192016101fa565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561026157610261610222565b604052919050565b600067ffffffffffffffff82111561028357610283610222565b5060051b60200190565b600082601f83011261029e57600080fd5b815160206102b36102ae83610269565b610238565b82815260059290921b840181019181810190868411156102d257600080fd5b8286015b848110156102fd578051600081810b82146102ef578081fd5b5083529183019183016102d6565b509695505050505050565b805167ffffffffffffffff8116811461032057600080fd5b919050565b60008060006060848603121561033a57600080fd5b835167ffffffffffffffff8082111561035257600080fd5b818601915086601f83011261036657600080fd5b815160206103766102ae83610269565b82815260059290921b8401810191818101908a84111561039557600080fd5b948201945b838610156103b35785518252948201949082019061039a565b918901519197509093505050808211156103cc57600080fd5b506103d98682870161028d565b9250506103e860408501610308565b9050925092509256fea2646970667358221220df5c9a348286e17f409848aa42106c66e0e27d13c5eb37347e5188a1a0b9697a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063dae2f4bc1461003b578063f601bc8b14610061575b600080fd5b61004e61004936600461012c565b610078565b6040519081526020015b60405180910390f35b610069610099565b60405161005893929190610145565b6002818154811061008857600080fd5b600091825260209091200154905081565b600154604051631168574f60e21b815260609182916000918291829182916001600160a01b03909116906345a15d3c906100d8906002906004016101db565b600060405180830381865afa1580156100f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011d9190810190610325565b91989097509095509350505050565b60006020828403121561013e57600080fd5b5035919050565b60608082528451908201819052600090602090608084019082880184805b8381101561017f57825185529385019391850191600101610163565b5086840385880152885180855289860194860193509150805b828110156101b6578451820b84529385019392850192600101610198565b50505067ffffffffffffffff8616604086015292506101d3915050565b949350505050565b6020808252825482820181905260008481528281209092916040850190845b81811015610216578354835260019384019392850192016101fa565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561026157610261610222565b604052919050565b600067ffffffffffffffff82111561028357610283610222565b5060051b60200190565b600082601f83011261029e57600080fd5b815160206102b36102ae83610269565b610238565b82815260059290921b840181019181810190868411156102d257600080fd5b8286015b848110156102fd578051600081810b82146102ef578081fd5b5083529183019183016102d6565b509695505050505050565b805167ffffffffffffffff8116811461032057600080fd5b919050565b60008060006060848603121561033a57600080fd5b835167ffffffffffffffff8082111561035257600080fd5b818601915086601f83011261036657600080fd5b815160206103766102ae83610269565b82815260059290921b8401810191818101908a84111561039557600080fd5b948201945b838610156103b35785518252948201949082019061039a565b918901519197509093505050808211156103cc57600080fd5b506103d98682870161028d565b9250506103e860408501610308565b9050925092509256fea2646970667358221220df5c9a348286e17f409848aa42106c66e0e27d13c5eb37347e5188a1a0b9697a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor initializes the FTSOv2 contract. The contract registry is used to fetch the FTSOv2 contract address."
      },
      "getFtsoV2CurrentFeedValues()": {
        "notice": "Get the current value of the feeds."
      }
    },
    "notice": "THIS IS AN EXAMPLE CONTRACT. DO NOT USE THIS CODE IN PRODUCTION.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 228,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFlareContractRegistry)218"
      },
      {
        "astId": 231,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "ftsoV2",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFastUpdater)154"
      },
      {
        "astId": 238,
        "contract": "contracts/FtsoV2FeedConsumer.sol:FtsoV2FeedConsumer",
        "label": "feedIndexes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IFastUpdater)154": {
        "encoding": "inplace",
        "label": "contract IFastUpdater",
        "numberOfBytes": "20"
      },
      "t_contract(IFlareContractRegistry)218": {
        "encoding": "inplace",
        "label": "contract IFlareContractRegistry",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}