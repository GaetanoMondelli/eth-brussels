{
  "address": "0x515e3c7D5A06253c8f9974f4A01018AaD257e48f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "data",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feedIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFtsoV2CurrentFeedValues",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_feedValues",
          "type": "uint256[]"
        },
        {
          "internalType": "int8[]",
          "name": "_decimals",
          "type": "int8[]"
        },
        {
          "internalType": "uint64",
          "name": "_timestamp",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_options",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x515e3c7D5A06253c8f9974f4A01018AaD257e48f",
    "transactionIndex": 0,
    "gasUsed": "1397615",
    "logsBloom": "0x
    "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d",
    "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x515e3c7D5A06253c8f9974f4A01018AaD257e48f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x6EDCE65403992e310A62460808c4b910D972f10f",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000515e3c7d5a06253c8f9974f4a01018aad257e48f0000000000000000000000002a1f5eb3e84e58e6f1e565306298b9de1273f203",
        "logIndex": 1,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x00000000000000000000000098b8e9b5830f04fe3b8d56a2f8455e337037ba280000000000000000000000000000000000000000000000000000000000004231",
        "logIndex": 2,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000004f52e61907b0ed9f26b88f16b2510a4ca524d6d00000000000000000000000000000000000000000000000000000000000003099",
        "logIndex": 3,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000d2a1bb23eb350814a30dd6f9de78bb2c8fdd9f1d0000000000000000000000000000000000000000000000000000000000003b68",
        "logIndex": 4,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x0000000000000000000000006892bdbbb14e1c9bd46bf31e7bac94d038fc82a6000000000000000000000000000000000000000000000000000000000000422d",
        "logIndex": 5,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000bd33bdff04c357f7fc019e72d0504c24cf4aa0100000000000000000000000000000000000000000000000000000000000008f11",
        "logIndex": 6,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x000000000000000000000000bc1f76ceb521eb5484b8943b5462d08ea96617a10000000000000000000000000000000000000000000000000000000000004eb2",
        "logIndex": 7,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9835964,
        "transactionHash": "0x4b01700e516f58f062983f8ae2bbff3d07f692391bc1fecc4cfa0b9f0138def0",
        "address": "0x1000000000000000000000000000000000000002",
        "topics": [
          "0xe7aa66356adbd5e839ef210626f6d8f6f72109c17fadf4c4f9ca82b315ae79b4"
        ],
        "data": "0x00000000000000000000000058fb598ec6db6901aa6f26a9a2087e9274128e5900000000000000000000000000000000000000000000000000000000000103ba",
        "logIndex": 8,
        "blockHash": "0x9bbd0b8edf946ed19fc03797beebc2522bddfae75b4adebd96c484cba37a7d2d"
      }
    ],
    "blockNumber": 9835964,
    "cumulativeGasUsed": "1397615",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EDCE65403992e310A62460808c4b910D972f10f",
    "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203"
  ],
  "numDeployments": 2,
  "solcInputHash": "9e52ad58fba57182ab31c44bde4a6ea1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feedIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFtsoV2CurrentFeedValues\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feedValues\",\"type\":\"uint256[]\"},{\"internalType\":\"int8[]\",\"name\":\"_decimals\",\"type\":\"int8[]\"},{\"internalType\":\"uint64\",\"name\":\"_timestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quote(uint32,string,bytes,bool)\":{\"params\":{\"_dstEid\":\"Destination chain's endpoint ID.\",\"_message\":\"The message.\",\"_options\":\"Message execution options (e.g., for sending gas to destination).\",\"_payInLzToken\":\"Whether to return fee in ZRO token.\"},\"returns\":{\"fee\":\"A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"send(uint32,string,bytes)\":{\"details\":\"Encodes the message as bytes and sends it using the `_lzSend` internal function.\",\"params\":{\"_dstEid\":\"The endpoint ID of the destination chain.\",\"_message\":\"The message string to be sent.\",\"_options\":\"Additional options for message execution.\"},\"returns\":{\"receipt\":\"A `MessagingReceipt` struct containing details of the message sent.\"}},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setPeer(uint32,bytes32)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_peer\":\"The address of the peer to be associated with the corresponding endpoint.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"constructor\":{\"notice\":\"Constructor initializes the FTSOv2 contract. The contract registry is used to fetch the FTSOv2 contract address.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getFtsoV2CurrentFeedValues()\":{\"notice\":\"Get the current value of the feeds.\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quote(uint32,string,bytes,bool)\":{\"notice\":\"Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token.\"},\"send(uint32,string,bytes)\":{\"notice\":\"Sends a message from the source chain to a destination chain.\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setPeer(uint32,bytes32)\":{\"notice\":\"Sets the peer address (OApp instance) for a corresponding endpoint.\"}},\"notice\":\"THIS IS AN EXAMPLE CONTRACT. DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FtsoV2FeedConsumerLz.sol\":\"FtsoV2FeedConsumerLz\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IBn256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n// G1Point implements a point in G1 group.\\nstruct G1Point {\\n  uint256 x;\\n  uint256 y;\\n}\\n\",\"keccak256\":\"0xd04c3b6f729dbe78f57526de2b58510c4e906810dadf5836ba0715e4d60fe6f0\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\n\\nimport { SortitionCredential } from \\\"./ISortition.sol\\\";\\n\\n/**\\n * Fast updater interface.\\n */\\ninterface IFastUpdater {\\n\\n    /// Signature structure\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    /// Fast update structure\\n    struct FastUpdates {\\n        uint256 sortitionBlock;\\n        SortitionCredential sortitionCredential;\\n        bytes deltas;\\n        Signature signature;\\n    }\\n\\n    /// Event emitted when a new set of updates is submitted.\\n    event FastUpdateFeedsSubmitted(\\n        uint32 indexed votingRoundId,\\n        address indexed signingPolicyAddress\\n    );\\n\\n    /// Event emitted when a feed is added or reset.\\n    event FastUpdateFeedReset(\\n        uint256 indexed votingRoundId,\\n        uint256 indexed index,\\n        bytes21 indexed id,\\n        uint256 value,\\n        int8 decimals);\\n\\n    /// Event emitted when a feed is removed.\\n    event FastUpdateFeedRemoved(\\n        uint256 indexed index);\\n\\n    /// Event emitted at the start of a new voting epoch - current feeds' values and decimals.\\n    event FastUpdateFeeds(uint256 indexed votingEpochId, uint256[] feeds, int8[] decimals);\\n\\n    /**\\n     * The entry point for providers to submit an update transaction.\\n     * @param _updates Data of an update transaction, which in addition to the actual list of updates,\\n     * includes the sortition credential proving the provider's eligibility to make updates in the also-included\\n     * sortition round, as well as a signature allowing a single registered provider to submit from multiple\\n     * EVM accounts.\\n     */\\n    function submitUpdates(FastUpdates calldata _updates) external;\\n\\n    /**\\n     * Public access to the stored data of all feeds.\\n     * @return _feedIds The list of feed ids.\\n     * @return _feeds The list of feeds.\\n     * @return _decimals The list of decimal places for feeds.\\n     * @return _timestamp The timestamp of the last update.\\n     */\\n    function fetchAllCurrentFeeds()\\n        external view\\n        returns (\\n            bytes21[] memory _feedIds,\\n            uint256[] memory _feeds,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        );\\n\\n    /**\\n     * Public access to the stored data of each feed, allowing controlled batch access to the lengthy complete data.\\n     * Feeds should be sorted for better performance.\\n     * @param _indices Index numbers of the feeds for which data should be returned, corresponding to `feedIds` in\\n     * the `FastUpdatesConfiguration` contract.\\n     * @return _feeds The list of data for the requested feeds, in the same order as the feed indices were given\\n     * (which may not be their sorted order).\\n     * @return _decimals The list of decimal places for the requested feeds, in the same order as the feed indices were\\n     * given (which may not be their sorted order).\\n     * @return _timestamp The timestamp of the last update.\\n     */\\n    function fetchCurrentFeeds(\\n        uint256[] calldata _indices\\n    )\\n        external view\\n        returns (\\n            uint256[] memory _feeds,\\n            int8[] memory _decimals,\\n            uint64 _timestamp\\n        );\\n\\n    /**\\n     * Informational getter concerning the eligibility criterion for being chosen by sortition.\\n     * @return _cutoff The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition.\\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\\n     */\\n    function currentScoreCutoff() external view returns (uint256 _cutoff);\\n\\n    /**\\n     * Informational getter concerning the eligibility criterion for being chosen by sortition in a given block.\\n     * @param _blockNum The block for which the cutoff is requested.\\n     * @return _cutoff The upper endpoint of the acceptable range of \\\"scores\\\" that providers generate for sortition.\\n     * A score below the cutoff indicates eligibility to submit updates in the present sortition round.\\n     */\\n    function blockScoreCutoff(uint256 _blockNum) external view returns (uint256 _cutoff);\\n\\n    /**\\n     * Informational getter concerning a provider's likelihood of being chosen by sortition.\\n     * @param _signingPolicyAddress The signing policy address of the specified provider. This is different from the\\n     * sender of an update transaction, due to the signature included in the `FastUpdates` type.\\n     * @return _weight The specified provider's weight for sortition purposes. This is derived from the provider's\\n     * delegation weight for the FTSO, but rescaled against a fixed number of \\\"virtual providers\\\", indicating how many\\n     * potential updates a single provider may make in a sortition round.\\n     */\\n    function currentSortitionWeight(address _signingPolicyAddress) external view returns (uint256 _weight);\\n\\n    /**\\n     * The submission window is a number of blocks forming a \\\"grace period\\\" after a round of sortition starts,\\n     * during which providers may submit updates for that round. In other words, each block starts a new round of\\n     * sortition and that round lasts `submissionWindow` blocks.\\n     */\\n    function submissionWindow() external view returns (uint8);\\n\\n    /**\\n     * Id of the current reward epoch.\\n     */\\n    function currentRewardEpochId() external view returns (uint24);\\n\\n    /**\\n     * The number of updates submitted in each block for the last `_historySize` blocks (up to `MAX_BLOCKS_HISTORY`).\\n     * @param _historySize The number of blocks for which the number of updates should be returned.\\n     * @return _noOfUpdates The number of updates submitted in each block for the last `_historySize` blocks.\\n     * The array is ordered from the current block to the oldest block.\\n     */\\n    function numberOfUpdates(uint256 _historySize) external view returns (uint256[] memory _noOfUpdates);\\n\\n    /**\\n     * The number of updates submitted in a block - available only for the last `MAX_BLOCKS_HISTORY` blocks.\\n     * @param _blockNumber The block number for which the number of updates should be returned.\\n     * @return _noOfUpdates The number of updates submitted in the specified block.\\n     */\\n    function numberOfUpdatesInBlock(uint256 _blockNumber) external view returns (uint256 _noOfUpdates);\\n}\\n\",\"keccak256\":\"0x81365c04d655f129e698ffcf83e22a55948331f99b9b54f4793857e9a0e2c71e\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/ISortition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\n\\nimport {G1Point} from \\\"./IBn256.sol\\\";\\n\\nstruct SortitionCredential {\\n  uint256 replicate;\\n  G1Point gamma;\\n  uint256 c;\\n  uint256 s;\\n}\\n\",\"keccak256\":\"0xce8eac4878a9af3a2aea4f4dc74995358de06a0d3b937ad84d3fe98b953c0a6c\",\"license\":\"MIT\"},\"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9;\\npragma abicoder v2;\\n\\ninterface IFlareContractRegistry {\\n    /**\\n     * @notice Returns contract address for the given name - might be address(0)\\n     * @param _name             name of the contract\\n     */\\n    function getContractAddressByName(string calldata _name) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract address for the given name hash - might be address(0)\\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\\n\\n    /**\\n     * @notice Returns contract addresses for the given names - might be address(0)\\n     * @param _names            names of the contracts\\n     */\\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\\n     */\\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\\n\\n    /**\\n     * @notice Returns all contract names and corresponding addresses\\n     */\\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\\n}\\n\",\"keccak256\":\"0x358aa3eced2172a3c252cd0c5efeb2572969ac6b64001f62facf185193668cea\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0x919b37133adff4dc528e3061deb2789c3149971b530c61e556fb3d09ab315dfc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FtsoV2FeedConsumerLz.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { IFlareContractRegistry } from \\\"@flarenetwork/flare-periphery-contracts/coston2/util-contracts/userInterfaces/IFlareContractRegistry.sol\\\";\\nimport { IFastUpdater } from \\\"@flarenetwork/flare-periphery-contracts/coston2/ftso/userInterfaces/IFastUpdater.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\\\";\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\ncontract FtsoV2FeedConsumerLz is OApp {\\n\\tIFlareContractRegistry internal contractRegistry;\\n\\tIFastUpdater internal ftsoV2;\\n\\t// Feed indexes: 0 = FLR/USD, 2 = BTC/USD, 9 = ETH/USD\\n\\tuint256[] public feedIndexes = [0, 2, 9];\\n\\tstring public data = \\\"Nothing received yet.\\\";\\n\\n\\t/**\\n\\t * Constructor initializes the FTSOv2 contract.\\n\\t * The contract registry is used to fetch the FTSOv2 contract address.\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _endpoint,\\n\\t\\taddress _delegate\\n\\t) OApp(_endpoint, _delegate) {\\n\\t\\tcontractRegistry = IFlareContractRegistry(\\n\\t\\t\\t0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019\\n\\t\\t);\\n\\t\\tftsoV2 = IFastUpdater(\\n\\t\\t\\tcontractRegistry.getContractAddressByName(\\\"FastUpdater\\\")\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * Get the current value of the feeds.\\n\\t */\\n\\tfunction getFtsoV2CurrentFeedValues()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256[] memory _feedValues,\\n\\t\\t\\tint8[] memory _decimals,\\n\\t\\t\\tuint64 _timestamp\\n\\t\\t)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tuint256[] memory feedValues,\\n\\t\\t\\tint8[] memory decimals,\\n\\t\\t\\tuint64 timestamp\\n\\t\\t) = ftsoV2.fetchCurrentFeeds(feedIndexes);\\n\\t\\t/* Your custom feed consumption logic. In this example the values are just returned. */\\n\\t\\treturn (feedValues, decimals, timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sends a message from the source chain to a destination chain.\\n\\t * @param _dstEid The endpoint ID of the destination chain.\\n\\t * @param _message The message string to be sent.\\n\\t * @param _options Additional options for message execution.\\n\\t * @dev Encodes the message as bytes and sends it using the `_lzSend` internal function.\\n\\t * @return receipt A `MessagingReceipt` struct containing details of the message sent.\\n\\t */\\n\\tfunction send(\\n\\t\\tuint32 _dstEid,\\n\\t\\tstring memory _message,\\n\\t\\tbytes calldata _options\\n\\t) external payable returns (MessagingReceipt memory receipt) {\\n\\t\\tbytes memory _payload = abi.encode(_message);\\n\\t\\treceipt = _lzSend(\\n\\t\\t\\t_dstEid,\\n\\t\\t\\t_payload,\\n\\t\\t\\t_options,\\n\\t\\t\\tMessagingFee(msg.value, 0),\\n\\t\\t\\tpayable(msg.sender)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token.\\n\\t * @param _dstEid Destination chain's endpoint ID.\\n\\t * @param _message The message.\\n\\t * @param _options Message execution options (e.g., for sending gas to destination).\\n\\t * @param _payInLzToken Whether to return fee in ZRO token.\\n\\t * @return fee A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token.\\n\\t */\\n\\tfunction quote(\\n\\t\\tuint32 _dstEid,\\n\\t\\tstring memory _message,\\n\\t\\tbytes memory _options,\\n\\t\\tbool _payInLzToken\\n\\t) public view returns (MessagingFee memory fee) {\\n\\t\\tbytes memory payload = abi.encode(_message);\\n\\t\\tfee = _quote(_dstEid, payload, _options, _payInLzToken);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function override to handle incoming messages from another chain.\\n\\t * @dev _origin A struct containing information about the message sender.\\n\\t * @dev _guid A unique global packet identifier for the message.\\n\\t * @param payload The encoded message payload being received.\\n\\t *\\n\\t * @dev The following params are unused in the current implementation of the OApp.\\n\\t * @dev _executor The address of the Executor responsible for processing the message.\\n\\t * @dev _extraData Arbitrary data appended by the Executor to the message.\\n\\t *\\n\\t * Decodes the received payload and processes it as per the business logic defined in the function.\\n\\t */\\n\\tfunction _lzReceive(\\n\\t\\tOrigin calldata /*_origin*/,\\n\\t\\tbytes32 /*_guid*/,\\n\\t\\tbytes calldata payload,\\n\\t\\taddress /*_executor*/,\\n\\t\\tbytes calldata /*_extraData*/\\n\\t) internal override {\\n\\t\\tdata = abi.decode(payload, (string));\\n\\t}\\n}\\n\",\"keccak256\":\"0x6118ed51c761ae9da86512173b79cb1123b5074007ab5b9153aa22cb3a04c156\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060409080825234620003585760009082816200183f80380380916200002782856200035d565b83398101031262000354576200003d8162000397565b906200004d602080920162000397565b8354336001600160a01b031980831682178755875190956001600160a01b0395949193869384929183167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08b80a316608052169081156200034557508260805116803b156200034157858091602489518094819363ca5eb5e160e01b8352600497888401525af18015620003375762000308575b50855194606086016001600160401b03811187821017620002f3578752808652600283870152600987870152815495600396878455808810620002d6575b5082825283822090825b888110620002c057505050600554600181811c91168015620002b5575b84821014620002a257601f81116200027f575b50602a7f4e6f7468696e67207265636569766564207965742e000000000000000000000001600555828060646002549473ad67fe66660fb8dfe9d6b1b4240d8650e30f6019808a881617600255858c51978895869463413b07e560e11b8652850152600b60248501526a2330b9ba2ab83230ba32b960a91b604485015216175afa928315620002735781936200022f575b5050501690825416179055516114799081620003c6823960805181818161023601528181610718015281816107f901528181610a4c01528181610d110152610e4f0152f35b9091809350813d83116200026b575b6200024a81836200035d565b810103126200026857506200025f9062000397565b388080620001ea565b80fd5b503d6200023e565b508651903d90823e3d90fd5b6200029b9060058352601f858420910160051c810190620003ac565b3862000159565b506022602492634e487b7160e01b835252fd5b90607f169062000146565b815160ff16838201559085019060010162000129565b838352848320620002ec918101908901620003ac565b386200011f565b604183634e487b7160e01b6000525260246000fd5b9094906001600160401b038111620003245786529338620000e1565b634e487b7160e01b825260418652602482fd5b87513d88823e3d90fd5b8580fd5b632d618d8160e21b8152600490fd5b5080fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200038157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200035857565b818110620003b8575050565b60008155600101620003ac56fe608060408181526004918236101561001657600080fd5b600092833560e01c91826313137d6514610de35750816317442b7014610dc15781633400288b14610d405781635e280f1114610cfc578163715018a614610ca257816373d4a13a14610bb45781637d25a05e14610b8f57816382413eac14610b325781638da5cb5b14610b0a578163bb0b6a5314610ad6578163ca5eb5e114610a1d578163dae2f4bc146109d0578163e0539e5814610608578163f2fde38b1461053b578163f601bc8b146102d8578163f77e5dd31461011a575063ff7bd03d146100e057600080fd5b34610116576060366003190112610116578060209263ffffffff610102611210565b168152600184522054905190602435148152f35b5080fd5b9050346102d45760803660031901126102d45761013561108b565b6001600160401b0391906024358381116102d05761015690369084016111f2565b926044359081116102d057366023820112156102d05761017f90369060248186013591016111bb565b606435908115158092036102cc57918596939186936101c86101d66102329951986101a98a6110d8565b60008a5260006020809b015287519283918b8084015289830190611160565b03601f19810183528261113f565b60008887516101e4816110d8565b82815201526101f284611284565b63ffffffff87519561020387611109565b1685528885015285840152606083015260808201528251631bb8518b60e31b815295869283923091840161133c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102c0578193610280575b50508083519280518452015190820152f35b90919250833d85116102b9575b610297818361113f565b81019184828403126102b65750906102ae91611314565b90388061026e565b80fd5b503d61028d565b508351903d90823e3d90fd5b8680fd5b8580fd5b8280fd5b8383346101165781600319360112610116576003548151631168574f60e21b8152602085820181905285546024830181905295855294909291849184916001600160a01b03169060448301907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90855b8a828210610521575050505082809103915afa938415610517578390849385966103f1575b509390825194606086016060875282518091528160808801930190845b8181106103dd5750505085820381870152808086519384815201950192805b8382106103c4576001600160401b0389168689015287870388f35b8451810b875295820195938201936001909101906103a9565b82518552938301939183019160010161038a565b93509450503d8084843e610405818461113f565b8201606083820312610513578251926001600160401b03938481116102d05781019382601f860112156102d05784519461043e86611259565b9561044b8651978861113f565b808752888088019160051b830101918583116104fc579089809201905b83821061050457505090508201519081116102d05781019180601f840112156102d057825161049681611259565b936104a38651958661113f565b818552888086019260051b82010192831161050057908886939201905b8282106104de575050506104d49101611270565b929092948661036d565b90809293505180890b81036104fc57815285929189019089016104c0565b8880fd5b8780fd5b81518152908201908201610468565b8380fd5b81513d85823e3d90fd5b835485528a97508996509093019260019283019201610348565b9050346102d45760203660031901126102d457610556611075565b9061055f6112bc565b6001600160a01b039182169283156105b6575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b83915060603660031901126101165761061f61108b565b926001600160401b03926024358481116101165761064090369085016111f2565b926044358581116102d4576106589036908301611043565b90610661611223565b50845161067c816101c86020998a8084015289830190611160565b61069c86519261068b846110d8565b3484528884019487865236916111bb565b916106a5611223565b5051928334036109ba578051806107e3575b5091899391610714959363ffffffff6106d26106e09d611284565b91511515968a519d8e611109565b168c52898c0152878b015260608a015260809889938482015286518095819482936302637a4560e41b84523391840161133c565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19182156107d85790818493610776575b50508151948151865284820151168486015201519081519084015201516060820152f35b91509150853d87116107d1575b61078d818461113f565b82019086838303126102b65750906107c68392838051936107ad85611124565b805185526107bc888201611270565b8886015201611314565b828201528680610752565b503d610783565b8351903d90823e3d90fd5b875163393f876560e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116918b818a81865afa9081156109b0578a91610976575b5016908115610966576108d6929189808d938d5195858701916323b872dd60e01b8352336024890152604488015260648701526064865261087086611109565b8d519561087c876110d8565b8587527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486880152519082855af1903d1561095d578b3d6108c86108bf826111a0565b9251928361113f565b81528b81943d92013e6113aa565b8051806108e4575b506106b7565b818a91810103126102cc578801518015908115036102cc57610907578a806108de565b865162461bcd60e51b8152808601899052602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b606092506113aa565b89516329b99a9560e11b81528890fd5b90508b81813d83116109a9575b61098d818361113f565b810103126109a5575181811681036109a5578e610830565b8980fd5b503d610983565b8b513d8c823e3d90fd5b86516304fb820960e51b81523481870152602490fd5b9050346102d45760203660031901126102d457803590805482101561051357602093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01549051908152f35b919050346102d45760203660031901126102d457610a39611075565b91610a426112bc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693859190853b156102d457602490838651978894859363ca5eb5e160e01b855216878401525af18015610acc57610aa2578380f35b6001600160401b038311610ab95750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b505034610116576020366003190112610116578060209263ffffffff610afa61108b565b1681526001845220549051908152f35b505034610116578160031936011261011657905490516001600160a01b039091168152602090f35b9050346102d457366003190160a08112610513576060136102d457606435906001600160401b03821161051357610b6b91369101611043565b50506084356001600160a01b03811691908290036102d45760209250519030148152f35b50503461011657806003193601126101165790602091610bad61108b565b5051908152f35b8284346102b657806003193601126102b6578151918282600554610bd78161109e565b9081845260209560019187600182169182600014610c7b575050600114610c1f575b505050610c1b9291610c0c91038561113f565b51928284938452830190611160565b0390f35b9190869350600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610c635750505082010181610c0c610c1b610bf9565b8054848a018601528895508794909301928101610c4a565b60ff19168782015293151560051b86019093019350849250610c0c9150610c1b9050610bf9565b83346102b657806003193601126102b657610cbb6112bc565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b505034610116578160031936011261011657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101165780600319360112610116577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b90610d7c61108b565b610dbb60243592610d8b6112bc565b63ffffffff831686526001602052838187205551928392836020909392919363ffffffff60408201951681520152565b0390a180f35b8284346102b657806003193601126102b6575080516001815260026020820152f35b849084366003190160e08112610513576060136102d4576001600160401b0390608435828111610ff357610e1a9036908701611043565b90939091906001600160a01b0360a435818116036102cc5760c43585811161050057610e499036908a01611043565b505033907f0000000000000000000000000000000000000000000000000000000000000000160361102f5750610e85610e80611210565b611284565b602435809103610ff75750508201602092602081830312610ff3578035908382116102d057610eb59291016111f2565b938451918211610ab95750600591610ecd835461109e565b601f8111610f93575b50602090601f8311600114610f135750839482939492610f08575b50508160011b916000199060031b1c191617905580f35b015190508480610ef1565b838552601f198316957f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0929186905b888210610f7b57505083600195969710610f62575b505050811b01905580f35b015160001960f88460031b161c19169055848080610f57565b80600185968294968601518155019501930190610f42565b8385527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0601f8401851c81019160208510610fe9575b601f01851c01905b818110610fde5750610ed6565b858155600101610fd1565b9091508190610fc9565b8480fd5b61102b8791611004611210565b935163309afaf360e21b815263ffffffff9094169284019283526020830152829160400190565b0390fd5b6391ac5e4f60e01b81523387820152602490fd5b9181601f84011215611070578235916001600160401b038311611070576020838186019501011161107057565b600080fd5b600435906001600160a01b038216820361107057565b6004359063ffffffff8216820361107057565b90600182811c921680156110ce575b60208310146110b857565b634e487b7160e01b600052602260045260246000fd5b91607f16916110ad565b604081019081106001600160401b038211176110f357604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b038211176110f357604052565b606081019081106001600160401b038211176110f357604052565b90601f801991011681019081106001600160401b038211176110f357604052565b919082519283825260005b84811061118c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161116b565b6001600160401b0381116110f357601f01601f191660200190565b9291926111c7826111a0565b916111d5604051938461113f565b829481845281830111611070578281602093846000960137010152565b9080601f830112156110705781602061120d933591016111bb565b90565b60043563ffffffff811681036110705790565b6040519061123082611124565b816000815260006020820152604080519161124a836110d8565b60008352600060208401520152565b6001600160401b0381116110f35760051b60200190565b51906001600160401b038216820361107057565b63ffffffff168060005260016020526040600020549081156112a4575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b6000546001600160a01b031633036112d057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908260409103126110705760405161132c816110d8565b6020808294805184520151910152565b906020909392936040835263ffffffff8151166040840152818101516060840152608061139061137a604084015160a08488015260e0870190611160565b6060840151868203603f190160a0880152611160565b910151151560c08401526001600160a01b03909416910152565b9192901561140c57508151156113be575090565b3b156113c75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561141f5750805190602001fd5b60405162461bcd60e51b81526020600482015290819061102b90602483019061116056fea264697066735822122039d6e319196c923acdc673c3c016366b5978be537027c7c36199cb91adcede3c64736f6c63430008160033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826313137d6514610de35750816317442b7014610dc15781633400288b14610d405781635e280f1114610cfc578163715018a614610ca257816373d4a13a14610bb45781637d25a05e14610b8f57816382413eac14610b325781638da5cb5b14610b0a578163bb0b6a5314610ad6578163ca5eb5e114610a1d578163dae2f4bc146109d0578163e0539e5814610608578163f2fde38b1461053b578163f601bc8b146102d8578163f77e5dd31461011a575063ff7bd03d146100e057600080fd5b34610116576060366003190112610116578060209263ffffffff610102611210565b168152600184522054905190602435148152f35b5080fd5b9050346102d45760803660031901126102d45761013561108b565b6001600160401b0391906024358381116102d05761015690369084016111f2565b926044359081116102d057366023820112156102d05761017f90369060248186013591016111bb565b606435908115158092036102cc57918596939186936101c86101d66102329951986101a98a6110d8565b60008a5260006020809b015287519283918b8084015289830190611160565b03601f19810183528261113f565b60008887516101e4816110d8565b82815201526101f284611284565b63ffffffff87519561020387611109565b1685528885015285840152606083015260808201528251631bb8518b60e31b815295869283923091840161133c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9283156102c0578193610280575b50508083519280518452015190820152f35b90919250833d85116102b9575b610297818361113f565b81019184828403126102b65750906102ae91611314565b90388061026e565b80fd5b503d61028d565b508351903d90823e3d90fd5b8680fd5b8580fd5b8280fd5b8383346101165781600319360112610116576003548151631168574f60e21b8152602085820181905285546024830181905295855294909291849184916001600160a01b03169060448301907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90855b8a828210610521575050505082809103915afa938415610517578390849385966103f1575b509390825194606086016060875282518091528160808801930190845b8181106103dd5750505085820381870152808086519384815201950192805b8382106103c4576001600160401b0389168689015287870388f35b8451810b875295820195938201936001909101906103a9565b82518552938301939183019160010161038a565b93509450503d8084843e610405818461113f565b8201606083820312610513578251926001600160401b03938481116102d05781019382601f860112156102d05784519461043e86611259565b9561044b8651978861113f565b808752888088019160051b830101918583116104fc579089809201905b83821061050457505090508201519081116102d05781019180601f840112156102d057825161049681611259565b936104a38651958661113f565b818552888086019260051b82010192831161050057908886939201905b8282106104de575050506104d49101611270565b929092948661036d565b90809293505180890b81036104fc57815285929189019089016104c0565b8880fd5b8780fd5b81518152908201908201610468565b8380fd5b81513d85823e3d90fd5b835485528a97508996509093019260019283019201610348565b9050346102d45760203660031901126102d457610556611075565b9061055f6112bc565b6001600160a01b039182169283156105b6575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b83915060603660031901126101165761061f61108b565b926001600160401b03926024358481116101165761064090369085016111f2565b926044358581116102d4576106589036908301611043565b90610661611223565b50845161067c816101c86020998a8084015289830190611160565b61069c86519261068b846110d8565b3484528884019487865236916111bb565b916106a5611223565b5051928334036109ba578051806107e3575b5091899391610714959363ffffffff6106d26106e09d611284565b91511515968a519d8e611109565b168c52898c0152878b015260608a015260809889938482015286518095819482936302637a4560e41b84523391840161133c565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19182156107d85790818493610776575b50508151948151865284820151168486015201519081519084015201516060820152f35b91509150853d87116107d1575b61078d818461113f565b82019086838303126102b65750906107c68392838051936107ad85611124565b805185526107bc888201611270565b8886015201611314565b828201528680610752565b503d610783565b8351903d90823e3d90fd5b875163393f876560e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116918b818a81865afa9081156109b0578a91610976575b5016908115610966576108d6929189808d938d5195858701916323b872dd60e01b8352336024890152604488015260648701526064865261087086611109565b8d519561087c876110d8565b8587527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656486880152519082855af1903d1561095d578b3d6108c86108bf826111a0565b9251928361113f565b81528b81943d92013e6113aa565b8051806108e4575b506106b7565b818a91810103126102cc578801518015908115036102cc57610907578a806108de565b865162461bcd60e51b8152808601899052602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b606092506113aa565b89516329b99a9560e11b81528890fd5b90508b81813d83116109a9575b61098d818361113f565b810103126109a5575181811681036109a5578e610830565b8980fd5b503d610983565b8b513d8c823e3d90fd5b86516304fb820960e51b81523481870152602490fd5b9050346102d45760203660031901126102d457803590805482101561051357602093527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01549051908152f35b919050346102d45760203660031901126102d457610a39611075565b91610a426112bc565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693859190853b156102d457602490838651978894859363ca5eb5e160e01b855216878401525af18015610acc57610aa2578380f35b6001600160401b038311610ab95750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b505034610116576020366003190112610116578060209263ffffffff610afa61108b565b1681526001845220549051908152f35b505034610116578160031936011261011657905490516001600160a01b039091168152602090f35b9050346102d457366003190160a08112610513576060136102d457606435906001600160401b03821161051357610b6b91369101611043565b50506084356001600160a01b03811691908290036102d45760209250519030148152f35b50503461011657806003193601126101165790602091610bad61108b565b5051908152f35b8284346102b657806003193601126102b6578151918282600554610bd78161109e565b9081845260209560019187600182169182600014610c7b575050600114610c1f575b505050610c1b9291610c0c91038561113f565b51928284938452830190611160565b0390f35b9190869350600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410610c635750505082010181610c0c610c1b610bf9565b8054848a018601528895508794909301928101610c4a565b60ff19168782015293151560051b86019093019350849250610c0c9150610c1b9050610bf9565b83346102b657806003193601126102b657610cbb6112bc565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b505034610116578160031936011261011657517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101165780600319360112610116577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b90610d7c61108b565b610dbb60243592610d8b6112bc565b63ffffffff831686526001602052838187205551928392836020909392919363ffffffff60408201951681520152565b0390a180f35b8284346102b657806003193601126102b6575080516001815260026020820152f35b849084366003190160e08112610513576060136102d4576001600160401b0390608435828111610ff357610e1a9036908701611043565b90939091906001600160a01b0360a435818116036102cc5760c43585811161050057610e499036908a01611043565b505033907f0000000000000000000000000000000000000000000000000000000000000000160361102f5750610e85610e80611210565b611284565b602435809103610ff75750508201602092602081830312610ff3578035908382116102d057610eb59291016111f2565b938451918211610ab95750600591610ecd835461109e565b601f8111610f93575b50602090601f8311600114610f135750839482939492610f08575b50508160011b916000199060031b1c191617905580f35b015190508480610ef1565b838552601f198316957f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0929186905b888210610f7b57505083600195969710610f62575b505050811b01905580f35b015160001960f88460031b161c19169055848080610f57565b80600185968294968601518155019501930190610f42565b8385527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0601f8401851c81019160208510610fe9575b601f01851c01905b818110610fde5750610ed6565b858155600101610fd1565b9091508190610fc9565b8480fd5b61102b8791611004611210565b935163309afaf360e21b815263ffffffff9094169284019283526020830152829160400190565b0390fd5b6391ac5e4f60e01b81523387820152602490fd5b9181601f84011215611070578235916001600160401b038311611070576020838186019501011161107057565b600080fd5b600435906001600160a01b038216820361107057565b6004359063ffffffff8216820361107057565b90600182811c921680156110ce575b60208310146110b857565b634e487b7160e01b600052602260045260246000fd5b91607f16916110ad565b604081019081106001600160401b038211176110f357604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b038211176110f357604052565b606081019081106001600160401b038211176110f357604052565b90601f801991011681019081106001600160401b038211176110f357604052565b919082519283825260005b84811061118c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161116b565b6001600160401b0381116110f357601f01601f191660200190565b9291926111c7826111a0565b916111d5604051938461113f565b829481845281830111611070578281602093846000960137010152565b9080601f830112156110705781602061120d933591016111bb565b90565b60043563ffffffff811681036110705790565b6040519061123082611124565b816000815260006020820152604080519161124a836110d8565b60008352600060208401520152565b6001600160401b0381116110f35760051b60200190565b51906001600160401b038216820361107057565b63ffffffff168060005260016020526040600020549081156112a4575090565b6024906040519063f6ff4fb760e01b82526004820152fd5b6000546001600160a01b031633036112d057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908260409103126110705760405161132c816110d8565b6020808294805184520151910152565b906020909392936040835263ffffffff8151166040840152818101516060840152608061139061137a604084015160a08488015260e0870190611160565b6060840151868203603f190160a0880152611160565b910151151560c08401526001600160a01b03909416910152565b9192901561140c57508151156113be575090565b3b156113c75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561141f5750805190602001fd5b60405162461bcd60e51b81526020600482015290819061102b90602483019061116056fea264697066735822122039d6e319196c923acdc673c3c016366b5978be537027c7c36199cb91adcede3c64736f6c63430008160033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quote(uint32,string,bytes,bool)": {
        "params": {
          "_dstEid": "Destination chain's endpoint ID.",
          "_message": "The message.",
          "_options": "Message execution options (e.g., for sending gas to destination).",
          "_payInLzToken": "Whether to return fee in ZRO token."
        },
        "returns": {
          "fee": "A `MessagingFee` struct containing the calculated gas fee in either the native token or ZRO token."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "send(uint32,string,bytes)": {
        "details": "Encodes the message as bytes and sends it using the `_lzSend` internal function.",
        "params": {
          "_dstEid": "The endpoint ID of the destination chain.",
          "_message": "The message string to be sent.",
          "_options": "Additional options for message execution."
        },
        "returns": {
          "receipt": "A `MessagingReceipt` struct containing details of the message sent."
        }
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setPeer(uint32,bytes32)": {
        "details": "Only the owner/admin of the OApp can call this function.Indicates that the peer is trusted to send LayerZero messages to this OApp.Set this to bytes32(0) to remove the peer address.Peer is a bytes32 to accommodate non-evm chains.",
        "params": {
          "_eid": "The endpoint ID.",
          "_peer": "The address of the peer to be associated with the corresponding endpoint."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "constructor": {
        "notice": "Constructor initializes the FTSOv2 contract. The contract registry is used to fetch the FTSOv2 contract address."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getFtsoV2CurrentFeedValues()": {
        "notice": "Get the current value of the feeds."
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quote(uint32,string,bytes,bool)": {
        "notice": "Quotes the gas needed to pay for the full omnichain transaction in native gas or ZRO token."
      },
      "send(uint32,string,bytes)": {
        "notice": "Sends a message from the source chain to a destination chain."
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setPeer(uint32,bytes32)": {
        "notice": "Sets the peer address (OApp instance) for a corresponding endpoint."
      }
    },
    "notice": "THIS IS AN EXAMPLE CONTRACT. DO NOT USE THIS CODE IN PRODUCTION.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1632,
        "contract": "contracts/FtsoV2FeedConsumerLz.sol:FtsoV2FeedConsumerLz",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 370,
        "contract": "contracts/FtsoV2FeedConsumerLz.sol:FtsoV2FeedConsumerLz",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 4380,
        "contract": "contracts/FtsoV2FeedConsumerLz.sol:FtsoV2FeedConsumerLz",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFlareContractRegistry)305"
      },
      {
        "astId": 4383,
        "contract": "contracts/FtsoV2FeedConsumerLz.sol:FtsoV2FeedConsumerLz",
        "label": "ftsoV2",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IFastUpdater)156"
      },
      {
        "astId": 4390,
        "contract": "contracts/FtsoV2FeedConsumerLz.sol:FtsoV2FeedConsumerLz",
        "label": "feedIndexes",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4393,
        "contract": "contracts/FtsoV2FeedConsumerLz.sol:FtsoV2FeedConsumerLz",
        "label": "data",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFastUpdater)156": {
        "encoding": "inplace",
        "label": "contract IFastUpdater",
        "numberOfBytes": "20"
      },
      "t_contract(IFlareContractRegistry)305": {
        "encoding": "inplace",
        "label": "contract IFlareContractRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}